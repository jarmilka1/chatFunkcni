<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />
    <title>Přihlášení</title>
    <script>
      /**
       * Constants
       */
      const TWO_PI = Math.PI * 2;

      /**
       * Application Class
       */
      class Application {
        /**
         * Application constructor
         */
        constructor() {
          this.canvas = document.getElementById("canvas");
          this.context = this.canvas.getContext("2d");
          this.width = this.canvas.width = window.innerWidth;
          this.height = this.canvas.height = window.innerHeight;
          this.center = {
            x: this.width / 2,
            y: this.height / 2,
          };

          this.circleContainers = [];

          //Resize listener for the canvas to fill browser window dynamically
          window.addEventListener("resize", () => this.resizeCanvas(), false);
        }

        /**
         * Simple resize function. Reinitializes everything on the canvas while changing the width/height
         */
        resizeCanvas() {
          this.width = this.canvas.width = window.innerWidth;
          this.height = this.canvas.height = window.innerHeight;
          this.center = {
            x: this.width / 2,
            y: this.height / 2,
          };

          //Empty the previous container and fill it again with new CircleContainer objects
          this.circleContainers = [];
          this.initializeCircleContainers();
        }

        /**
         * Create a number of CircleContainer objects based on the numberOfContainers variable
         * @return void
         */
        initializeCircleContainers() {
          for (let x = 0; x < this.width + 100; x += 100) {
            for (let y = 0; y < this.height + 100; y += 100) {
              //Initialize a new instance of the CircleContainer class
              let circleContainer = new CircleContainer(this.context, x, y);

              //Let the CircleContainer initialize it's children
              circleContainer.initializeCircles();

              //Add the container to our array of CircleContainer objects
              this.circleContainers.push(circleContainer);
            }
          }
        }

        /**
         * Updates the application and every child of the application
         * @return void
         */
        update() {
          for (let i = 0; i < this.circleContainers.length; i++) {
            this.circleContainers[i].update();
          }
        }

        /**
         * Renders the application and every child of the application
         * @return void
         */
        render() {
          //Clear the entire canvas every render
          this.context.clearRect(0, 0, this.width, this.height);

          //Trigger the render function on every child element
          for (let i = 0; i < this.circleContainers.length; i++) {
            this.circleContainers[i].render();
          }
        }

        /**
         * Update and render the application at least 60 times a second
         * @return void
         */
        loop() {
          this.update();
          this.render();

          window.requestAnimationFrame(() => this.loop());
        }
      }

      /**
       * CircleContainer Class
       */
      class CircleContainer {
        /**
         * CircleContainer constructor
         * @param context - The context from the canvas object of the Application
         * @param x
         * @param y
         */
        constructor(context, x, y) {
          this.context = context;
          this.position = { x, y };

          this.numberOfCircles = 19;
          this.circles = [];

          this.baseRadius = 20;
          this.bounceRadius = 150;
          this.singleSlice = TWO_PI / this.numberOfCircles;
        }

        /**
         * Create a number of Circle objects based on the numberOfCircles variable
         * @return void
         */
        initializeCircles() {
          for (let i = 0; i < this.numberOfCircles; i++) {
            this.circles.push(
              new Circle(
                this.position.x,
                this.position.y + Math.random(),
                this.baseRadius,
                this.bounceRadius,
                i * this.singleSlice
              )
            );
          }
        }

        /**
         * Try to update the application at least 60 times a second
         * @return void
         */
        update() {
          for (let i = 0; i < this.numberOfCircles; i++) {
            this.circles[i].update(this.context);
          }
        }

        /**
         * Try to render the application at least 60 times a second
         * @return void
         */
        render() {
          for (let i = 0; i < this.numberOfCircles; i++) {
            this.circles[i].render(this.context);
          }
        }
      }

      /**
       * Circle Class
       */
      class Circle {
        /**
         * Circle constructor
         * @param x - The horizontal position of this circle
         * @param y - The vertical position of this circle
         * @param baseRadius
         * @param bounceRadius
         * @param angleCircle
         */
        constructor(x, y, baseRadius, bounceRadius, angleCircle) {
          this.basePosition = { x, y };
          this.position = { x, y };
          this.speed = 0.01;
          this.baseSize = 10;
          this.size = 10;
          this.angle = x + y;
          this.baseRadius = baseRadius;
          this.bounceRadius = bounceRadius;
          this.angleCircle = angleCircle;
        }

        /**
         * Update the position of this object
         * @return void
         */
        update() {
          this.position.x =
            this.basePosition.x +
            Math.cos(this.angleCircle) *
              (Math.sin(this.angle + this.angleCircle) * this.bounceRadius +
                this.baseRadius);
          this.position.y =
            this.basePosition.y +
            Math.sin(this.angleCircle) *
              (Math.sin(this.angle + this.angleCircle) * this.bounceRadius +
                this.baseRadius);
          this.size = Math.cos(this.angle) * 8 + this.baseSize;

          this.angle += this.speed;
        }

        /**
         * Renders this Circle object on the canvas
         * @param context - The context from the canvas object of the Application
         * @return void
         */
        render(context) {
          context.fillStyle = "hsl(195, 100%, " + this.size * 4 + "%)";
          context.beginPath();
          context.arc(this.position.x, this.position.y, this.size, 0, TWO_PI);
          context.fill();
        }
      }

      /**
       * Onload function is executed whenever the page is done loading, initializes the application
       */
      window.onload = function () {
        //Create a new instance of the application
        const application = new Application();

        //Initialize the CircleContainer objects
        application.initializeCircleContainers();

        //Start the initial loop function for the first time
        application.loop();
      };
    </script>
    <style>
      body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        background-color: darkslategrey;
        position: relative; /* Add relative positioning to the body */
      }
      a {
        margin-left: 94px;
        font-weight: bold;
      }

      h1 {
        text-align: center;
        color: whitesmoke;
        text-shadow: 0px 0px 10px rgb(0, 0, 0);
      }

      form {
        max-width: 400px;
        margin-right: 20px;
        background-color: ;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        border-radius: 30px 30px 30px 30px;
        -moz-border-radius: 30px 30px 30px 30px;
        -webkit-border-radius: 30px 30px 30px 30px;
        border: 0px solid #000000;
        position: relative; /* Set form position to relative */
        z-index: 2; /* Set a higher z-index to ensure it's above the canvas */
        animation: zoomIn 1s forwards;
      }

      label {
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
        text-align: center;
      }

      input[type="text"]{
        width: 378px;
        padding: 10px;
        margin-bottom: 10px;
        color: white;
        background-color: #333;
        border: 1px solid rgb(0, 0, 0);
        border-radius: 30px 30px 30px 30px;
        -moz-border-radius: 30px 30px 30px 30px;
        -webkit-border-radius: 30px 30px 30px 30px;
        font-weight: bold;
      }

      button {
        margin: auto;
        display: block;
        width: 400px;
        padding: 10px;
        background-color: #333;
        color: #fff;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        border-radius: 30px 30px 30px 30px;
        -moz-border-radius: 30px 30px 30px 30px;
        -webkit-border-radius: 30px 30px 30px 30px;
        border: 0px solid #000000;
        height: 37px;
      }

      button:hover {
        background-color: #555;
      }

      form i {
        margin-left: -30px;
        cursor: pointer;
      }

      #vstup {
        margin-top: 10px;
      }
      

      #divall {
        max-width: 400px;
        background-color: transparent;
        padding: 20px;
        padding-bottom: 25px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        border-radius: 30px 30px 30px 30px;
        -moz-border-radius: 30px 30px 30px 30px;
        -webkit-border-radius: 30px 30px 30px 30px;
        border: 0px solid #000000;
        position: relative; /* Set div position to relative */
        z-index: 2; /* Set a higher z-index to ensure it's above the canvas */
        animation: zoomIn 1s forwards;
      }
      html,
      body {
        margin: 0;
        padding: 0;
        background-color: hsl(195, 100%, 7%);
      }

      #canvas {
        margin: 0 auto;
        display: block;
        filter: url("#shadowed-goo");
        position: absolute; /* Set canvas position to absolute */
      }

      svg {
        display: none;
      }
      form,
#divall {
  transition: transform 0.3s ease-in-out; /* Add a smooth transition effect */
}
/*form:hover,
#divall:hover {
  transform: scale(1.1);
}*/

@keyframes zoomIn {
            from {
                opacity: 0;
                transform: scale(0);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }
    </style>
  </head>

  <body>
    <canvas id="canvas">Your browser doesn't support canvas</canvas>

    <!-- SVG Goo filter from: https://css-tricks.com/gooey-effect/ -->
    <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
      <defs>
        <filter id="shadowed-goo">
          <fegaussianblur in="SourceGraphic" result="blur" stdDeviation="10" />
          <fecolormatrix
            in="blur"
            mode="matrix"
            values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7"
            result="goo"
          />
          <fegaussianblur in="goo" stdDeviation="3" result="shadow" />
          <fecolormatrix
            in="shadow"
            mode="matrix"
            values="0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 1 -0.2"
            result="shadow"
          />
          <feoffset in="shadow" dx="1" dy="1" result="shadow" />
          <feblend in2="shadow" in="goo" result="goo" />
          <feblend in2="goo" in="SourceGraphic" result="mix" />
        </filter>
        <filter id="goo">
          <fegaussianblur in="SourceGraphic" result="blur" stdDeviation="10" />
          <fecolormatrix
            in="blur"
            mode="matrix"
            values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7"
            result="goo"
          />
          <feblend in2="goo" in="SourceGraphic" result="mix" />
        </filter>
      </defs>
    </svg>
    <div class="okraje">
      <form method="post" action="/login">
        <h1>Zadejte název vaší místnosti</h1>
        <input
          type="text"
          name="name"
          id="name"
          autocomplete="off"
          placeholder="Napište název místnosti..."
          required
        />
        <br />
        <br />
        <button id="vstup" type="submit">Vstoupit</button>
      </form>
      <br />
      <div id="divall">
        <h1>
          Pro vstoupení do chatu pro všechny uživatele stiskněte tlačítko
          uvedeno níže
        </h1>
        <button>Chat pro všechny</button>
      </div>
    </div>
  </body>
</html>
